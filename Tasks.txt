1. Создать модель данных SpecialTags
2. В файле ApplicationDbContext.cs создать DBSet для новой модели 
3. Создать контроллер SpecialTagsController 
4. Внедряем зависимость базы данных через конструктор класса и поля private readonly 
5. Создать представление Index
6. Реализовать всю логику CRUD
7. Добавить модель, вьюмодель и контроллер Products
8. Добавить представление Products

// ДОМАШНЕЕ ЗАДАНИЕ К УРОКУ 5:
// 1. Найти несколько картинок для товаров и загрузить их в папку Images
// 2. Найти картинку по умолчанию для товаров и добавить её в соответствующую папку, указанную в пути модели SD
// 3. Создать представление добавления товара
// 3.1 Вывод должен осуществляться в блоки DIV, НЕ ТАБЛИЦУ!
// 3.2 На каждой строке должно быть 2 адаптивные колонки, одна для названия (шириной в 2 ячейки), вторая для полей ввода (шириной в 5 ячеик)
// 4. В представлении должна присутствовать валидация на стороне браузера
// 5. Под каждым обязательным полем необходимо выводить ошибки валидации, если таковы будут
// 6. Доступность товара должно выводится чекбоксом
// 7. !Подготовить места под выподающие списки ProductTypes и SpecialTags, но пока не реализовывать их!

// ПОДСКАЗКИ:
// 1. Представление должно распологаться в админ-зоне сайта для корректного отображения
// 2. В качестве модели в представлении используем ProductsVM (логично, т.к. с ней работаем в контроллере)
// 3. Для передачи картинок из формы, необходимо в тег <form> добавить аргумент enctype="multipart/form-data", пример: <form method="post" enctype="multipart/form-data">
// 4. Для создания формы загрузки изображения, используем тэг <input type="file" name="files" class="form-control" />
// 5. Для вывода ошибок валидации используем тэг: <span asp-validation-for="..." class="сюда ставим класс Bootstrap для вывода ошибок (красный текст)></span>"